{
	"info": {
		"_postman_id": "2f8a2196-aaee-4324-8cba-08dd39ce6f4c",
		"name": "Notes API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Adding Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {",
							"  pm.response.to.have.status(201);",
							"});",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"pm.test('response body should be an object', () => {",
							"  const responseJson = pm.response.json();",
							"  pm.expect(responseJson).to.be.an('object');",
							"});",
							"pm.test('response body should have the correct property and value', () => {",
							"  const responseJson = pm.response.json();",
							"",
							"  pm.expect(responseJson).to.ownProperty('status');",
							"  pm.expect(responseJson.status).to.equals('success');",
							"  pm.expect(responseJson).to.ownProperty('message');",
							"  pm.expect(responseJson.message).to.equals('Catatan berhasil ditambahkan');",
							"  pm.expect(responseJson).to.ownProperty('data');",
							"  pm.expect(responseJson.data).to.be.an('object');",
							"});",
							"pm.test('response body data should have noteId property and not equal to empty', () => {",
							"  const responseJson = pm.response.json();",
							"  const { data } = responseJson;",
							"  ",
							"  pm.expect(data).to.ownProperty('noteID');",
							"  pm.expect(data.noteID).to.not.equals('');",
							"",
							"  pm.environment.set('noteID', data.noteID);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Catatan Postman 1\",\n    \"tags\": [\"Javascript\", \"NodeJS\"],\n    \"body\": \"Belajar menggunakan Postman\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting All Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"pm.test('response body should be an object', () => {",
							"  const responseJson = pm.response.json();",
							"  pm.expect(responseJson).to.be.an('object');",
							"});",
							"pm.test('response body should have the correct property and value', () => {",
							"  const responseJson = pm.response.json();",
							"",
							"  pm.expect(responseJson).to.ownProperty('status');",
							"  pm.expect(responseJson.status).to.equals('success');",
							"  pm.expect(responseJson).to.ownProperty('data');",
							"  pm.expect(responseJson.data).to.be.an('object');",
							"});",
							"pm.test('response body data should have a notes array and contain at least 1 item', () => {",
							"  const responseJson = pm.response.json();",
							"  const { data } = responseJson;",
							"",
							"  pm.expect(data).to.ownProperty('notes');",
							"  pm.expect(data.notes).to.be.an('array');",
							"  pm.expect(data.notes).lengthOf.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting Specified Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"pm.test('response body should be an object', () => {",
							"  const responseJson = pm.response.json();",
							"  pm.expect(responseJson).to.be.an('object');",
							"});",
							"pm.test('response body should have the correct property and value', () => {",
							"  const responseJson = pm.response.json();",
							"",
							"  pm.expect(responseJson).to.ownProperty('status');",
							"  pm.expect(responseJson.status).to.equals('success');",
							"  pm.expect(responseJson).to.ownProperty('data');",
							"  pm.expect(responseJson.data).to.be.an('object');",
							"});",
							"pm.test('response body data should contain note object', () => {",
							"  const responseJson = pm.response.json();",
							"  const { data } = responseJson;",
							"",
							"  pm.expect(data).to.ownProperty('note');",
							"  pm.expect(data.note).to.be.an('object');",
							"});",
							"pm.test('note object should contain correct value for id, title, body, and tags property', () => {",
							"  const responseJson = pm.response.json();",
							"  const { data: { note } } = responseJson;",
							"",
							"  const expectedId = pm.environment.get('noteID');",
							"  const expectedTitle = 'Catatan Postman 1';",
							"  const expectedTags = [\"Javascript\", \"NodeJS\"];",
							"  const expectedBody = 'Belajar menggunakan Postman';",
							"",
							"  pm.expect(note).to.have.ownProperty('id');",
							"  pm.expect(note.id).to.equals(expectedId);",
							"",
							"  pm.expect(note).to.have.ownProperty('title');",
							"  pm.expect(note.title).to.equals(expectedTitle);",
							"",
							"  pm.expect(note).to.have.ownProperty('tags');",
							"  pm.expect(note.tags).to.eql(expectedTags);",
							"",
							"  pm.expect(note).to.have.ownProperty('body');",
							"  pm.expect(note.body).to.equals(expectedBody);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/notes/{{noteID}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"pm.test('response body should be an object', () => {",
							"  const responseJson = pm.response.json();",
							"  pm.expect(responseJson).to.be.an('object');",
							"});",
							"pm.test('response body should have the correct property and value', () => {",
							"  const responseJson = pm.response.json();",
							"",
							"  pm.expect(responseJson).to.ownProperty('status');",
							"  pm.expect(responseJson.status).to.equals('success');",
							"  pm.expect(responseJson).to.ownProperty('message');",
							"  pm.expect(responseJson.message).to.be.equals('Catatan berhasil diperbarui');",
							"});",
							"pm.test('when request the updated note', () => {",
							"  const noteID = pm.environment.get('noteID');",
							"",
							"  pm.sendRequest(`http://localhost:5000/notes/${noteID}`, (error, response) => {",
							"    if (!error) {",
							"      pm.test('then the updated note should contain the latest data', () => {",
							"        const responseJson = response.json();",
							"        const { data: { note } } = responseJson;",
							"",
							"        const expectedTitle = 'Catatan Postman 1';",
							"        const expectedTags = [\"Javascript\", \"NodeJS\"];",
							"        const expectedBody = 'Belajar menggunakan Postman. revised';",
							"",
							"        pm.expect(note.title).to.equals(expectedTitle);",
							"        pm.expect(note.tags).to.eql(expectedTags);",
							"        pm.expect(note.body).to.equals(expectedBody);",
							"      });",
							"    }",
							"  })",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Catatan Postman 1\",\n    \"tags\": [\"Javascript\", \"NodeJS\"],\n    \"body\": \"Belajar menggunakan Postman. revised\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/notes/{{noteID}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"pm.test('response body should be an object', () => {",
							"  const responseJson = pm.response.json();",
							"  pm.expect(responseJson).to.be.an('object');",
							"});",
							"pm.test('response body should have the correct property and value', () => {",
							"  const responseJson = pm.response.json();",
							"",
							"  pm.expect(responseJson).to.ownProperty('status');",
							"  pm.expect(responseJson.status).to.equals('success');",
							"  pm.expect(responseJson).to.ownProperty('message');",
							"  pm.expect(responseJson.message).to.be.equals('Catatan berhasil dihapus');",
							"});",
							"pm.test('when request the deleted note', () => {",
							"  const noteID = pm.environment.get('noteID');",
							"",
							"  pm.sendRequest(`http://localhost:5000/notes/${noteID}`, (error, response) => {",
							"    if (!error) {",
							"      pm.test('the deleted note should be not found', () => {",
							"        pm.expect(response.code).to.equals(404);",
							"",
							"        const responseJson = response.json();",
							"        pm.expect(responseJson.status).to.equals('fail');",
							"        pm.expect(responseJson.message).to.equals('Catatan tidak ditemukan');",
							"      });",
							"    }",
							"  });",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/notes/{{noteID}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteID}}"
					]
				}
			},
			"response": []
		}
	]
}